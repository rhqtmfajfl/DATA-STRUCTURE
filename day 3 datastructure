day3


정렬의 개념

일정한 기준으로 자료의 순서를 변경하는 알고리즘을 정렬이라한다.

다음과 같은 정수의 나열이 있을 땨


5,8,2,4,9,1

오름차순으로 정렬하면 다음과 같다.

1,2,4,5,8,9

내림차순으로 9,8,5,4,2,1



버블 정렬 인접한 데이터를 비교하여 위치를 교환하는 정렬 방식이다.

공기 방울이 물위로 떠오르듯 데이터가 이동하기 때무에 버블 정렬이라 부른다.

int data[5] = {90,78,100,30,55}

90 78 100 30 55  

90 78 100 30 55
78 90 100 30 55
78 90 100 30 55
78 90 30 100 55
78 90 30 55 100



버블 정렬은 정렬시 시간이 많이 걸린다.
-> 그렇게 느린건 아니지만 

어떤 상황일 때 적절 할까?
많은 데이터를 가지고 있을 때는 비효율 적이다.





삽입 정렬

삽입 정렬은 각자료의 적절한 위치를 찾아 삽입하는 정렬 알고리즘이다.

정렬이 되있다고 간주해야하낟.

int data[5] = {90,78,100,30,55}


계속 정렬을 하면서 비교할 현재 위치에서 앞에 있는 숫자들과 현재 순자를 보고 앞으로 간다.

장점 자료의 일부가 정렬 상태일때 유리하다 
매우 불리한 경우는 맨~~앞에 있는게 너무 멀면 불리





퀵정렬

교재 279페이지 퀵정렬



재귀함수는 잘못 쓰면 스택 오버 플로우가 발생한다

처음에 중간값을 잡는다.



최선의 경우와

최악의 경우 : 피벗을 맨 왼쪽이나 맨 오른쪽을 피벗 기준으로 잡을 경우
한쪽으로 치우치지 않는 방식으로 알고리즘을 짜야 한다.




트리에서도 한쪽으로 치우치질 수 있다 편협트리라고 한다.

그래서 훨씬더 많은 시간을 소비하게 된다.

이문제를 해결하기 위해 AVL이라는 툴이 있다. 밸런스 툴 - 오른쪽과 왼쪽을 안정적으로 맞춰 준다.

AVL트리를 짤줄 알면 레드 블랙 트리를 4시간 안에 짜면 구글에 들어간다.




큐

////////////
데이터를 큐에 넣는 동작이다.

dequeue
큐에서 데이터를 꺼내는 동작이다.

rear가 마지막이고 fornt가 0이다


원형 queue 원형큐는 선형큐의 반복적 데이터 이동의 단점을 보완한 알고리즘이다.

그림과 같이 Front와 Rear가 큐 사이즈 내에서 회전한다.

원형큐 알고리즘을 직접구현??!!! front = (front +1) %SIZE;
Rear = (Rear + 1) % SIZE;






/////////////////


너비우선탐색 BFS

너비 우선 탐색은 물결이 퍼지듯 가까운 경로 후보부터 탐색하는 방법이다.

한쪽 길을 끝까지 탐색하는 깊이우선 탐색과 비교된다.



///////////////

STACK 의 개념 후입 선출 이다. 선입 후출


PUSH 스택에 자료를 넣는 동작이다.

POP 스택에서 자료를 꺼내는 동작이다.





깊이 우선 탐색 초기 STACK에는 시작좌표를 넣고 다음 과정을 반복



////////////

이진 검색은 정렬된 배열 또는 리스트에서 특정 값을 빠르게 찾는 알고리즘이다.

중간 값 부터 비교하여 찾고자 하는 값과의 크고 작음에 따라 범위를 좁혀간다.

정렬이 되어있어야 한다.

장점 대량의 자료를 log 성능으로 검색이 가능하다
단점 : 자료를 항상 정렬된 상태로유지해야 한다.

항상 이진 겁색이 좋다는게 보장 되지 않는다.



//////////////////

해시는 불특정 형태의 아이템을 특정 형태로 변경하는 알고리즘이다.

해시 함수를 어떻게 짜는지가 가장 중요하다.

가변길이 배열 1000 고정길이 500이면 다 수용이 안된다.

해시 함수는 동일한 형태는 아니다.

해시는 정형화된 형태로 나오지 않는다. 분포를 골고루 분포하게 끔 해야 한다.  



해시 함수에서 골고루 분포가 되면 좋은데 가끔 충돌이 일어나는 경우가 있다.

변경한 결과 값이 동일한 경욱 ㅏ발생하는데 이를 해시 충돌이라한다.

해시 충돌해결에는 open addressing 또는 seperate addressing이 있다.

open addressing 은 알고리즘ㅇ느 해시함수 격ㄹ과의 충돌이 발생했을 경우

해시 함수 결과가 가리키는 ㅇ다음 아이템을 적용하는 방식이다.

구현이 간단한 반면 테이블의 크기에 여융를 두어야 검색효율을 유지할 수 있따.

데이터 크기가 해시 테이블 보다 작은 것을 사용한다.


가변 길이 아이템 500 고정길이 배열 테이블은 1000으로 둬서 테이블의 크기에 여유를 둔다.



Separate Chaining

이거는 링크드 리스트 상태로 구현한다.

이 알고리즘은 해시 함수 결과의 충돌이 발생했을 경우

충돌한 아이템을 별도 리스트로 구성하여 해결한다.
검색 효율이 좋으나 구현이 복잡하고 메모리 효율이 떨어지다.

오픈 어드레스보다 메모리를 더 쓸수 밖에 없다.

c는 malloc calloc

고정길이 배열에 false true 형태의 테이블이 하나더 나타나서 충돌 형태를 알려 준다.

링크드 리스트에서




///
해시함수의 구현 

해시함수는 충돌을 최소화 하도록 변환값 산포가 좋아야 한다.

검색하려는 키가 사번인 경우 다음과 같이 구현...


return id % tableSize;

산포도가 좋은 방법 고민

상기 hashfunction은 산포가 좋자 않아 각자 알고리즘ㅇ르 구성한다.

//////////////////////////////



트리의 개념자열구조는 어레이 또는 링크드 리스트



트리는 일반적으로 이진 트리를 말한다.

자식노드가 2개 이하인 경우 이를 이진트리라 한다.

자신을 기준으로 왼쪽 작은 데이터 오른쪽은 큰데이터가 들어간다.


데이터는 이진 트리형태로 되어 있다.

검색을 위하여 모든 노드를 방문하는 것을 순회라고 부르며,

순회의 방법에는 전위 순회 
중위 순회

후위 순회


항상 왼쪽부터 먼저고 그다음에 오른쪽 자식노드가 된다.

중위는 왼쪽 자식노드 - 부모노드 - 오른쪽 자식노드 순이다.

순회 할때 재귀 함수를 사용한다.



이진 탐색 트리
이진트리 중 모든 자료가 정렬되어 있는 경우 이를 이진 탐색트리라 부른다.

조건.

1. 트리내에 같은 값을 가지는 노드가 없다. -> 가장 중요 트리는 중복된 데이터로 표현하지 않는다. 
  트리 사용시 중복된 데이터를 사용하지 않을 때 사용한다.
2. 왼쪽 자식의 모든 노드는 현재 노드보다 작다.

3.오른쪽 자식의 모든 노드는 현재 노드 보다 크다.


이진 탐색트리의 검색
평균적으로 log의 성능을 보인다.


이진 탐색 트리의 추가 및 삭제

이진 탐색트리의 추가 연산은 검색 연산과 같다.

삭제 연산을 위한 알고리즘을 고안해보자.

밑으로 내려가면서 검색하면서 비어있는곳에 추가를 하는방식이다.

삭제를 할 경우


루트 삭제 

왼쪽 삭제시

오른쪽 삭제시



//////////////////////////////////////
업링크


이진 탐색트리는 ㅇunique key를 통한 자료의 고속 접근이 가능한 반면 더블링 ㄹ이크드 리스트와 같이 무브 first prev next last 동작이 불가능하다.

노드의 링크가 left right 두개만 존재하기 때문이다.




//////////////////////////
avl tree


트리의 높익 ㅏ다를 경우 효율이 떨어지므로 이를 조절하는 것이 균형 트리이다.

이진탐색트리의 일종이다.
모든 노드의 왼쪽과 오른쪽 서브트리 높이 차가 1을 넘지 않는다.


트리의 균형을 재조정하는 추가작업이 필요하다.

장점 검색성능이 o(log N으로 보장된다.
단점 삽입과 삭제 시 균형을 재조정하는 추가연산이 필요하다.




균형치 왼쪽과 오른쪽 의 노드를 다 계산해야 한다.  
오른쪽
3-0 =3
2-0=2
1-0=1  
왼쪽
1-2= -1

0-1=-1


왼쪽은 균형이 맞지만 오른쪽은 균형이 맞지 않다.

다음은 왼쪽에 노드가 추가되어 균형이 깨진 트리의 재조정 과정을 보여준다.

키가 1인 노드가 추가되면서 균형치가 깨졌으므로

잎노드로부터 탐색하여 균형치가 깨진 첫번째 노드를 찾고 


기준이 leaf 노드 이다.

잎노드의 그다음 노드로 균형을 맞춘다.

avl 트리에서 내가 삭제를 할 때 균형을 맞추는지? 과제

노드 7이 삭제되면 균형치가 2인 노드가 발생하므로 재조정을 필요로 한다.

삭ㅈ
